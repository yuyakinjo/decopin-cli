name: Performance Benchmark

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run every Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  benchmark:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build library
        run: bun run build

      - name: Build example CLI
        run: bun run build:app

      - name: Run performance benchmark
        run: bun run scripts/benchmark-markdown.js performance.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance.md

      # Store performance history in a separate branch
      - name: Setup performance branch
        if: github.ref == 'refs/heads/main'
        run: |
          # Save current performance report
          cp performance.md /tmp/performance.md

          # Try to fetch existing performance branch
          git fetch origin performance-history:refs/remotes/origin/performance-history || true

          # Create or checkout performance branch
          if git show-ref --verify --quiet refs/remotes/origin/performance-history; then
            git checkout -b performance-history origin/performance-history
          else
            git checkout --orphan performance-history
            git rm -rf . || true
          fi

      - name: Process and add performance report to history
        if: github.ref == 'refs/heads/main'
        run: |
          # Restore performance report
          cp /tmp/performance.md performance.md
          
          mkdir -p performance-history
          
          # Get current commit info
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_DATE=$(date -u +%Y-%m-%d)
          
          # Extract current metrics
          CURRENT_AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1)
          CURRENT_HELP=$(grep -o 'Help/Error commands.*[0-9][0-9]*\.[0-9][0-9]*ms' performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1)
          CURRENT_EXEC=$(grep -o 'Execution commands.*[0-9][0-9]*\.[0-9][0-9]*ms' performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1)
          
          # Create or update version history
          if [ ! -f "performance-history/versions.csv" ]; then
            echo "sha,date,avg,help,exec" > performance-history/versions.csv
          fi
          
          # Add current version AFTER updating the report with previous versions
          # This ensures the current run is shown as "Current" and not in the history
          
          # Update version history in the report with existing versions
          if [ -f "performance-history/versions.csv" ]; then
            cat > update-version-history.ts << 'EOF'
          import { readFileSync, writeFileSync, existsSync } from 'fs';
          
          interface Version {
            sha: string;
            date: string;
            avg: string;
            help: string;
            exec: string;
          }
          
          function parseCSV(csvPath: string): Version[] {
            if (!existsSync(csvPath)) {
              return [];
            }
            
            const content = readFileSync(csvPath, 'utf8');
            const lines = content.trim().split('\n').slice(1); // Skip header
            
            return lines.map(line => {
              const [sha, date, avg, help, exec] = line.split(',');
              return { sha, date, avg, help, exec };
            });
          }
          
          function updatePerformanceReport(reportPath: string, versions: Version[]) {
            const content = readFileSync(reportPath, 'utf8');
            const lines = content.split('\n');
            const newLines: string[] = [];
            
            let inVersionTable = false;
            let foundCurrent = false;
            
            for (const line of lines) {
              if (line.includes('### Version History')) {
                inVersionTable = true;
                newLines.push(line);
              } else if (inVersionTable && line.startsWith('| Current')) {
                foundCurrent = true;
                newLines.push(line);
                
                // Add the last 3 versions (excluding the most recent which is "Current")
                const previousVersions = versions.slice(-4, -1).reverse();
                for (const version of previousVersions) {
                  newLines.push(`| ${version.sha} | ${version.date} | ${version.avg}ms | ${version.help}ms | ${version.exec}ms |`);
                }
              } else if (inVersionTable && line.includes('| _Previous versions')) {
                // Skip the placeholder line
                continue;
              } else {
                newLines.push(line);
              }
            }
            
            writeFileSync(reportPath, newLines.join('\n'));
          }
          
          // Main execution
          const csvPath = 'performance-history/versions.csv';
          const reportPath = 'performance.md';
          
          const versions = parseCSV(csvPath);
          if (versions.length > 0) {
            updatePerformanceReport(reportPath, versions);
            console.log(`Updated performance report with ${Math.min(3, versions.length - 1)} previous versions`);
          } else {
            console.log('No version history found');
          }
          EOF
            
            bun run update-version-history.ts
            rm -f update-version-history.ts
          fi
          
          # Now add the current version to CSV for future runs
          echo "${COMMIT_SHA},${COMMIT_DATE},${CURRENT_AVG},${CURRENT_HELP},${CURRENT_EXEC}" >> performance-history/versions.csv
          
          # Keep only last 10 versions
          head -1 performance-history/versions.csv > performance-history/versions.tmp
          tail -n +2 performance-history/versions.csv | tail -10 >> performance-history/versions.tmp
          mv performance-history/versions.tmp performance-history/versions.csv
          
          # Save files
          cp performance.md "performance-history/$(date -u +%Y-%m-%d-%H%M%S).md"
          cp performance.md performance-history/latest.md
          cp performance.md latest.md
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add performance-history/ latest.md
          git commit -m "Add performance benchmark for ${COMMIT_SHA}" || true

      - name: Push performance history
        if: github.ref == 'refs/heads/main'
        run: |
          git push origin performance-history --force-with-lease || true

      # Comment on PR with performance comparison
      - name: Compare performance with main
        if: github.event_name == 'pull_request'
        id: compare
        run: |
          # Try to get main branch performance data
          git fetch origin performance-history:refs/remotes/origin/performance-history || true

          PREVIOUS_AVG="0"
          if git show-ref --verify --quiet refs/remotes/origin/performance-history; then
            # Try to get latest.md from performance-history branch
            git show origin/performance-history:latest.md > /tmp/previous-performance.md 2>/dev/null || true

            if [ -f "/tmp/previous-performance.md" ]; then
              echo "Found previous benchmark data"
              PREVIOUS_AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' /tmp/previous-performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1 || echo "0")
            fi
          fi

          # Extract metrics from current run
          CURRENT_AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1 || echo "0")

          # Calculate percentage change
          if [ "$PREVIOUS_AVG" != "0" ] && [ "$CURRENT_AVG" != "0" ]; then
            CHANGE=$(echo "scale=2; (($CURRENT_AVG - $PREVIOUS_AVG) / $PREVIOUS_AVG) * 100" | bc)
            echo "performance_change=$CHANGE" >> $GITHUB_OUTPUT
            echo "current_avg=$CURRENT_AVG" >> $GITHUB_OUTPUT
            echo "previous_avg=$PREVIOUS_AVG" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request' && steps.compare.outputs.performance_change
        uses: actions/github-script@v7
        with:
          script: |
            const change = parseFloat('${{ steps.compare.outputs.performance_change }}');
            const current = '${{ steps.compare.outputs.current_avg }}';
            const previous = '${{ steps.compare.outputs.previous_avg }}';

            const emoji = change > 5 ? '‚ö†Ô∏è' : change < -5 ? 'üöÄ' : '‚úÖ';
            const trend = change > 0 ? 'slower' : 'faster';

            const fs = require('fs');
            const reportContent = fs.readFileSync('performance.md', 'utf8');

            // Try to get version history
            let versionHistory = '';
            let performanceTrend = '';
            try {
              const { execSync } = require('child_process');
              const csvContent = execSync('git show origin/performance-history:performance-history/versions.csv 2>/dev/null || echo ""', { encoding: 'utf8' });
              if (csvContent && csvContent.trim()) {
                const lines = csvContent.trim().split('\n').slice(1); // Skip header
                const lastVersions = lines.slice(-3).reverse();
                
                if (lastVersions.length > 0) {
                  // Performance trend analysis
                  const avgValues = lastVersions.map(line => {
                    const [,,avg] = line.split(',');
                    return parseFloat(avg) || 0;
                  }).filter(v => v > 0);
                  
                  if (avgValues.length >= 2) {
                    const trend = avgValues[0] > avgValues[avgValues.length - 1] ? 'üìà improving' : 
                                 avgValues[0] < avgValues[avgValues.length - 1] ? 'üìâ degrading' : 
                                 'üìä stable';
                    performanceTrend = `\n\n**Performance Trend**: ${trend} over last ${avgValues.length} versions`;
                  }
                  
                  // Version comparison table
                  versionHistory = '\n\n### üìä Recent Version Comparison\n\n';
                  versionHistory += '| Version | Date | Average | Help/Error | Execution | vs Previous |\n';
                  versionHistory += '|---------|------|---------|------------|-----------|-------------|\n';
                  versionHistory += `| **Current PR** | - | **${current}ms** | - | - | - |\n`;
                  
                  let previousAvg = parseFloat(current);
                  lastVersions.forEach((line, idx) => {
                    const [sha, date, avg, help, exec] = line.split(',');
                    if (sha && avg) {
                      const avgNum = parseFloat(avg);
                      const diff = ((parseFloat(current) - avgNum) / avgNum * 100).toFixed(1);
                      const vsPrev = idx === 0 ? ((previousAvg - avgNum) / avgNum * 100).toFixed(1) : '-';
                      
                      const trend = diff > 0 ? `+${diff}%` : `${diff}%`;
                      const trendEmoji = parseFloat(diff) < -5 ? 'üöÄ' : parseFloat(diff) > 5 ? '‚ö†Ô∏è' : '‚úÖ';
                      
                      versionHistory += `| ${sha} | ${date} | ${avg}ms | ${help}ms | ${exec}ms | ${trendEmoji} ${trend} |\n`;
                      previousAvg = avgNum;
                    }
                  });
                  
                  // Add performance insights
                  if (avgValues.length >= 3) {
                    const improvement = ((avgValues[avgValues.length - 1] - parseFloat(current)) / avgValues[avgValues.length - 1] * 100).toFixed(1);
                    const avgImprovement = avgValues.reduce((acc, val, idx) => {
                      if (idx === 0) return 0;
                      return acc + ((avgValues[idx - 1] - val) / avgValues[idx - 1] * 100);
                    }, 0) / (avgValues.length - 1);
                    
                    versionHistory += '\n\n#### üìà Performance Insights\n\n';
                    versionHistory += `- Overall improvement from 3 versions ago: **${improvement}%**\n`;
                    versionHistory += `- Average improvement per version: **${avgImprovement.toFixed(1)}%**\n`;
                    versionHistory += `- Best performance: **${Math.min(...avgValues, parseFloat(current)).toFixed(2)}ms** ${Math.min(...avgValues, parseFloat(current)) === parseFloat(current) ? '(this PR) üéâ' : ''}\n`;
                  }
                }
              }
            } catch (e) {
              console.log('Could not fetch version history:', e.message);
            }
            
            const comment = [
              `## ${emoji} Performance Benchmark Results`,
              '',
              `**Average startup time**: ${current}ms (${Math.abs(change).toFixed(2)}% ${trend} than main)`,
              '',
              `- Previous (main): ${previous}ms`,
              `- Current (PR): ${current}ms`,
              `- Change: ${change > 0 ? '+' : ''}${change.toFixed(2)}%`,
              performanceTrend,
              versionHistory,
              '',
              '<details>',
              '<summary>View full benchmark report</summary>',
              '',
              '```markdown',
              reportContent,
              '```',
              '',
              '</details>'
            ].join('\n');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Create performance badge and commit to performance branch
      - name: Create and commit performance badge
        if: github.ref == 'refs/heads/main'
        run: |
          AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' latest.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1 || echo "0")
          COLOR="green"
          if (( $(echo "$AVG > 150" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$AVG > 100" | bc -l) )); then
            COLOR="yellow"
          fi

          echo "{\"schemaVersion\": 1, \"label\": \"startup time\", \"message\": \"${AVG}ms\", \"color\": \"$COLOR\"}" > latest-badge.json

          # Add badge to performance branch
          git add latest-badge.json
          git commit -m "Update performance badge" || true
          git push origin performance-history --force-with-lease || true