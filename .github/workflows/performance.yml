name: Performance Benchmark

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run every Monday at 00:00 UTC
    - cron: '0 0 * * 1'

jobs:
  benchmark:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build library
        run: bun run build

      - name: Build example CLI
        run: bun run build:app

      - name: Run performance benchmark
        run: bun run scripts/benchmark-markdown.js performance.md

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance.md

      # Store performance history in a separate branch
      - name: Setup performance branch
        if: github.ref == 'refs/heads/main'
        run: |
          # Save current performance report
          cp performance.md /tmp/performance.md

          # Try to fetch existing performance branch
          git fetch origin performance-history:refs/remotes/origin/performance-history || true

          # Create or checkout performance branch
          if git show-ref --verify --quiet refs/remotes/origin/performance-history; then
            git checkout -b performance-history origin/performance-history
          else
            git checkout --orphan performance-history
            git rm -rf . || true
          fi

      - name: Add performance report to history
        if: github.ref == 'refs/heads/main'
        run: |
          # Restore performance report
          cp /tmp/performance.md performance.md

          mkdir -p performance-history
          cp performance.md "performance-history/$(date -u +%Y-%m-%d-%H%M%S).md"
          cp performance.md performance-history/latest.md
          cp performance.md latest.md

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add performance-history/ latest.md
          git commit -m "Add performance benchmark for $(git rev-parse --short HEAD)" || true

      - name: Push performance history
        if: github.ref == 'refs/heads/main'
        run: |
          git push origin performance-history --force-with-lease || true

      # Comment on PR with performance comparison
      - name: Compare performance with main
        if: github.event_name == 'pull_request'
        id: compare
        run: |
          # Try to get main branch performance data
          git fetch origin performance-history:refs/remotes/origin/performance-history || true

          PREVIOUS_AVG="0"
          if git show-ref --verify --quiet refs/remotes/origin/performance-history; then
            # Try to get latest.md from performance-history branch
            git show origin/performance-history:latest.md > /tmp/previous-performance.md 2>/dev/null || true

            if [ -f "/tmp/previous-performance.md" ]; then
              echo "Found previous benchmark data"
              PREVIOUS_AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' /tmp/previous-performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1 || echo "0")
            fi
          fi

          # Extract metrics from current run
          CURRENT_AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' performance.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1 || echo "0")

          # Calculate percentage change
          if [ "$PREVIOUS_AVG" != "0" ] && [ "$CURRENT_AVG" != "0" ]; then
            CHANGE=$(echo "scale=2; (($CURRENT_AVG - $PREVIOUS_AVG) / $PREVIOUS_AVG) * 100" | bc)
            echo "performance_change=$CHANGE" >> $GITHUB_OUTPUT
            echo "current_avg=$CURRENT_AVG" >> $GITHUB_OUTPUT
            echo "previous_avg=$PREVIOUS_AVG" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with performance results
        if: github.event_name == 'pull_request' && steps.compare.outputs.performance_change
        uses: actions/github-script@v7
        with:
          script: |
            const change = parseFloat('${{ steps.compare.outputs.performance_change }}');
            const current = '${{ steps.compare.outputs.current_avg }}';
            const previous = '${{ steps.compare.outputs.previous_avg }}';

            const emoji = change > 5 ? '‚ö†Ô∏è' : change < -5 ? 'üöÄ' : '‚úÖ';
            const trend = change > 0 ? 'slower' : 'faster';

            const fs = require('fs');
            const reportContent = fs.readFileSync('performance.md', 'utf8');

            const comment = [
              `## ${emoji} Performance Benchmark Results`,
              '',
              `**Average startup time**: ${current}ms (${Math.abs(change).toFixed(2)}% ${trend} than main)`,
              '',
              `- Previous (main): ${previous}ms`,
              `- Current (PR): ${current}ms`,
              `- Change: ${change > 0 ? '+' : ''}${change.toFixed(2)}%`,
              '',
              '<details>',
              '<summary>View full benchmark report</summary>',
              '',
              '```markdown',
              reportContent,
              '```',
              '',
              '</details>'
            ].join('\n');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      # Create performance badge and commit to performance branch
      - name: Create and commit performance badge
        if: github.ref == 'refs/heads/main'
        run: |
          AVG=$(grep -o 'Average startup time.*[0-9][0-9]*\.[0-9][0-9]*ms' latest.md | grep -o '[0-9][0-9]*\.[0-9][0-9]*' | head -1 || echo "0")
          COLOR="green"
          if (( $(echo "$AVG > 150" | bc -l) )); then
            COLOR="red"
          elif (( $(echo "$AVG > 100" | bc -l) )); then
            COLOR="yellow"
          fi

          echo "{\"schemaVersion\": 1, \"label\": \"startup time\", \"message\": \"${AVG}ms\", \"color\": \"$COLOR\"}" > latest-badge.json

          # Add badge to performance branch
          git add latest-badge.json
          git commit -m "Update performance badge" || true
          git push origin performance-history --force-with-lease || true